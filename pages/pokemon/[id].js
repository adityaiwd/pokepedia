import { useState } from "react";
import { GET_POKEMON_DETAIL } from "../../graphql/queries";
import client from "../../graphql/client";
import Image from "next/image";
import Head from "next/head";
import styled from "@emotion/styled";
import CatchModal from "../../components/pokemon-detail/CatchModal";
import { Title, Subtitle } from "../../components/global/Global";
import pokemonNumber from "../../utils/pokemon-number";
import Button from "../../components/global/Button";
import Types from "../../components/pokemon-detail/Types";
import Moves from "../../components/pokemon-detail/Moves";
import capitalizeFirstLetter from "../../utils/capitalize-first-letter";
import { toast } from "react-toastify";
import { db } from "../../utils/db";
import pokemonImage from "../../utils/pokemon-image";

const BannerWrapper = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: -2rem;
`;

const InfoWrapper = styled.div`
  margin-left: 2rem;
`;

export default function PokemonDetail({ pokemon }) {
  const [toggleMoves, setToggleMoves] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [pokemonCaught, setPokemonCaught] = useState(null);
  const showMoves = (toggle) => {
    return toggle ? pokemon.moves : pokemon.moves.slice(0, 15);
  };
  const catchPokemon = async () => {
    setPokemonCaught(null);
    setOpenModal(true);
    const chance = Math.random() < 0.5;

    setTimeout(() => {
      setPokemonCaught(chance);
    }, 3000);
  };

  const savePokemon = async (nickname = "") => {
    const exist = await db.myPokemons
      .where("name")
      .equalsIgnoreCase(pokemon.name)
      .and((item) => item.nickname === nickname)
      .toArray();
    if (nickname.length > 15) {
      toast.error("Nickname cannot be more than 15 characters", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        progress: undefined,
        style: { fontSize: "1.4rem" },
      });
    } else if (exist.length === 0 || nickname === "") {
      await db.myPokemons.add({
        pokeId: pokemon.id,
        name: pokemon.name,
        nickname: nickname,
      });
      toast.success("Pokémon saved to your collection", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        progress: undefined,
        style: { fontSize: "1.4rem" },
      });
      setOpenModal(false);
    } else {
      toast.error("That nickname is already exist for this pokémon", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        progress: undefined,
        style: { fontSize: "1.4rem" },
      });
    }
  };
  return (
    <div>
      <Head>
        <title>Poképedia | {capitalizeFirstLetter(pokemon.name)}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BannerWrapper>
        <Image
          src={pokemonImage(pokemon.id)}
          alt="pokemon"
          height={150}
          width={150}
        />
        <InfoWrapper>
          <Subtitle style={{ marginBottom: ".5rem" }}>
            {pokemonNumber(pokemon.id.toString())}
          </Subtitle>
          <Title style={{ textTransform: "uppercase" }}>{pokemon.name}</Title>
          <Types types={pokemon.types} />
        </InfoWrapper>
      </BannerWrapper>
      <Moves
        moves={showMoves(toggleMoves)}
        showAll={pokemon.moves.length > 15}
        onClickShowAll={() => setToggleMoves(!toggleMoves)}
      />
      <Button
        variant="contained"
        style={{ marginBottom: "3rem" }}
        onClick={catchPokemon}
      >
        Catch
      </Button>
      <CatchModal
        open={openModal}
        onClose={() => setOpenModal(false)}
        caught={pokemonCaught}
        catchAgain={catchPokemon}
        onSave={(nickname) => savePokemon(nickname)}
      />
    </div>
  );
}

export async function getServerSideProps(context) {
  const { data } = await client.query({
    query: GET_POKEMON_DETAIL,
    variables: {
      name: context.params.id,
    },
  });
  return {
    props: {
      pokemon: {
        id: data.pokemon.id,
        name: data.pokemon.name,
        types: data.pokemon.types,
        moves: data.pokemon.moves,
      },
    },
  };
}
